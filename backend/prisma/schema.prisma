datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}
enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id        Int      @id @default(autoincrement())  // Unique number for each user (like student ID)
  email     String   @unique                        // Email address (must be unique)
  username  String   @unique
  firstName String?
  lastName  String?                                  // User's display name
  password  String                                  // Encrypted password
  bio       String?                                 // Optional bio (? means optional)
  profilePic String? 
  avatar    String?  // URL to profile picture
  location  String?
  website   String?                               // Optional profile picture URL
  posts     Post[]                                  // List of all posts by this user
  role      UserRole @default(USER)
  createdAt DateTime @default(now())               // When account was created
  updatedAt DateTime @updatedAt
  sentConnections     Connection[] @relation("SentConnections")
  receivedConnections Connection[] @relation("ReceivedConnections")
  
  @@map("users")                    // When last updated
}

model Post {
  id        Int      @id @default(autoincrement())  // Unique post ID
  content   String                                  // The actual post text
  imageUrl  String?                                 // Optional image
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)  // Links to User table
  authorId  Int                                     // Which user wrote this post
  likes     Int      @default(0)                   // Number of likes (starts at 0)
  createdAt DateTime @default(now())               // When posted
  updatedAt DateTime @updatedAt                    // When last edited

  @@map("posts")
}

model Connection {
  id          Int      @id @default(autoincrement())
  senderId    Int                                      // Who sent the request
  receiverId  Int                                      // Who received it
  status      ConnectionStatus @default(PENDING)      // Current state
  createdAt   DateTime @default(now())                // When sent
  updatedAt   DateTime @updatedAt                     // When status changed
  
  // Relationships
  sender      User     @relation("SentConnections", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceivedConnections", fields: [receiverId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([senderId, receiverId])  // Can't send duplicate requests
  @@index([senderId])
  @@index([receiverId])
  @@index([status])
  
  @@map("connections")
}


